#!/usr/bin/env node

'use strict';

const BaseCommand = require('commander').Command;
const pProps = require('p-props');
const Command = require('./commands/base').Command;
const MigrateCommand = require('./commands/migrate').Command;
const RollbackCommand = require('./commands/rollback').Command;
const ListCommand = require('./commands/list').Command;

const program = new Command();

program
	.version(require('../package.json').version)
	.option('--adapter <name>', 'which db adapter to use')
	.option('--config <path>', 'config file to use')
	.option('--timeout <timeout>', 'timeout for migrate/rollback')
	.option('--template <path>', 'path to template for new migrations')
	.option('--dir <dir>', 'dir where migrations stored')
	.option('--url <url>', 'db connect url')
	.option('--trace', 'verbose mode (includes error stack trace)')
	.option('--silent', 'prevent output of detailed log')
	.option(
		'--no-exit',
		'require a clean shutdown of the event loop: process.exit will not be ' +
		'called at the end'
	);

program
	.command(new Command('init', {initParams: {skipDirCheck: true}}))
	.description('initialize migration system')
	.asyncAction(function() {
		return Promise.resolve()
			.then(() => {
				return this.migrationManager.init();
			})
			.then(() => {
				return this.migrationManager.getParams();
			})
			.then((migrationParams) => {
				this.logger.info(
					'initialization successfully done, migration files will be ' +
					'stored at: `' + migrationParams.dir + '`'
				);
			});
	});

program.command(new Command('create <basename>'))
	.description('create new migration based on template')
	.asyncAction(function(basename, command) {
		return Promise.resolve()
			.then(() => {
				return this.migrationManager.create(basename);
			})
			.then((migration) => {
				return pProps({
					name: migration.name,
					path: this.migrationManager.getMigrationPath(migration.name)
				});
			})
			.then((migration) => {
				this.logger.info(
					'New migration `' + migration.name + '` created at ' +
					migration.path
				);
			});
	});

// async action handler for migrate and rollback commands
var actionCommandAsyncAction = function(names, command) {
	return this.execute({names: names, command: command});
};

program
	.command(new MigrateCommand('migrate [migrations...]'))
	.option(
		'-s, --status <name>', 'which migrations execute by default (when ' +
		'particular migrations are not set), default status is `new`'
	)
	.option('-f, --force', 'force to execute already executed migrations')
	.option(
		'-t, --tag <expression>', 'execute only migrations that satisfied expression'
	)
	.description('run all or selected migrations')
	.asyncAction(actionCommandAsyncAction);

program
	.command(new RollbackCommand('rollback [migrations...]'))
	.option(
		'-s, --status <name>', 'which migrations execute by default (when ' +
		'particular migrations are not set), default status is `executed`'
	)
	.option('-f, --force', 'force to rollback not yet executed migrations')
	.option(
		'-t, --tag <expression>', 'rollback only migrations that satisfied expression'
	)
	.description('rollback all or selected migrations')
	.asyncAction(actionCommandAsyncAction);

program
	.command(new ListCommand('list [status]'))
	.option(
		'-t, --tag <expression>', 'list only migrations that satisfied expression'
	)
	.description(
		'list migration with selected status (`new`, `executed` or `all`), ' +
		'`new` by default'
	)
	.asyncAction(function(status, command, callback) {
		status = status || 'new';
		return this.execute({status: status, command: command}, callback);
	});


// Default command
program
	.command(new Command('*'))
	.asyncAction(function(name) {
		throw new Error('Unrecognized command `' + name + '`');
	});


// let's start the party (program entry point)
program.parse(process.argv);

if (!Command.isInitialized()) program.help();
